rules_version = '2';

// ===== IMPORTANT: SHARED RULESET =====
// This ruleset is shared between two front-end applications:
// 1. Healthcare-EMR - The main healthcare application
// 2. Hospice-EMR - The hospice-specific application
//
// Both applications belong to the same Firebase project but have different front-end codebases.
// The Hospice-EMR project is responsible for merging and deploying the rules from both applications.
// 
// DO NOT EDIT THIS FILE DIRECTLY!
// Instead, edit the source files in the firebase/rules directory:
// - shared-rules.rules: Rules shared between both applications
// - hospice-rules.rules: Rules specific to the Hospice-EMR application
// Then run the manage-rules.mjs script to merge and deploy the rules.
// ===============================

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
        return request.auth != null;
    }

    function isAdmin() {
        return request.auth.token.role == 'admin';
    }

    function isDoctor() {
        return request.auth.token.role == 'doctor';
    }

    function isNurse() {
        return request.auth.token.role == 'nurse';
    }

    function isHospiceStaff() {
        return isAuthenticated() && (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
    }

    function isRegularDoctor() {
        return isAuthenticated() && 
          request.auth.token.role == 'doctor' &&
          !request.auth.token.hospiceAccess;
    }

    function isFacilityAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'facility_admin';
    }

    function canManageDocuments() {
        return isAdmin() || isFacilityAdmin() || isDoctor() || isNurse();
    }

    function hasUserFacilityAccess(facilityId) {
        return exists(/databases/$(database)/documents/facilityUsers/$(request.auth.uid)) &&
          facilityId in get(/databases/$(database)/documents/facilityUsers/$(request.auth.uid)).data.facilities;
    }

    function isFacilityAdminFor(facilityId) {
        return exists(/databases/$(database)/documents/user_facilities/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/user_facilities/$(request.auth.uid)).data.facilityId == facilityId;
    }

    function isHealthcareStaff() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['doctor', 'nurse', 'admin'];
    }

    function isPatientWithPortalAccess() {
        return exists(/databases/$(database)/documents/patients/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/patients/$(request.auth.uid)).data.isPatientPortalEnabled == true;
    }

    function isEmailUnique(email) {
        return !exists(/databases/$(database)/documents/patients/$(email));
    }

    // Collection: users
    match /users/{userId} {
        allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
        allow write: if isAuthenticated() && isAdmin();
        allow update: if isAuthenticated() && request.auth.uid == userId && 
                       !request.resource.data.diff(resource.data).affectedKeys()
                        .hasAny(['role', 'hospiceAccess']);
    }

    // Collection: medications
    match /medications/{medicationId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (isDoctor() || isNurse() || isAdmin());
        allow delete: if isAuthenticated() && 
          ((resource.data.type == 'hospice' && isHospiceStaff()) || 
           (resource.data.type != 'hospice' && isRegularDoctor()) || 
           isAdmin());
    }

    // Collection: hospice_patients
    match /hospice_patients/{patientId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor') &&
          // Ensure patientId and MRN are numbers
          (request.resource.data.patientId is number || !('patientId' in request.resource.data)) &&
          (request.resource.data.mrn is number || !('mrn' in request.resource.data))
        );
    }

    // Collection: hospice_visits
    match /hospice_visits/{visitId} {
        allow read: if request.auth != null && (
          // Allow access with token claims
          (request.auth.token.hospiceAccess == true || request.auth.token.admin == true) ||
          // Fallback to user document data if token claims aren't available
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
        allow write: if request.auth != null && (
          // Allow access with token claims
          request.auth.token.hospiceAccess == true ||
          // Fallback to user document data if token claims aren't available
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true
        );
    }

    // Collection: hospice_care_plans
    match /hospice_care_plans/{planId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse')
        );
    }

    // Collection: hospice_referrals
    match /hospice_referrals/{referralId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse')
        );
    }

    // Collection: hospice_medications
    match /hospice_medications/{medicationId} {
        allow read, write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: hospice_assessments
    match /hospice_assessments/{assessmentId} {
        allow read, write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: hospice_personnel
    match /hospice_personnel/{personnelId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (
          isAdmin() || 
          isFacilityAdmin()
        );
    }

    // Collection: hospice_idg_meetings
    match /hospice_idg_meetings/{meetingId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse')
        );
    }

    // Collection: hospice_symptom_logs
    match /hospice_symptom_logs/{logId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse')
        );
    }

    // Collection: hospice_service_visits
    match /hospice_service_visits/{visitId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse')
        );
    }

    // Collection: hospice_vitals
    match /hospice_vitals/{vitalId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse')
        );
        allow create: if request.auth != null && (
          request.auth.token.hospiceAccess == true && 
          (request.auth.token.role == 'admin' || request.auth.token.role == 'doctor' || request.auth.token.role == 'nurse') &&
          request.resource.data.temperature is number &&
          request.resource.data.pulse is number &&
          request.resource.data.respirations is number &&
          request.resource.data.bloodPressure is string &&
          request.resource.data.oxygenSaturation is number &&
          request.resource.data.pain is number &&
          request.resource.data.patientId is string &&
          request.resource.data.timestamp is string &&
          request.resource.data.recordedBy is string
        );
    }

    // Collection: hospice_locations
    match /hospice_locations/{locationId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (
          isAdmin() || 
          (isHospiceStaff() && request.auth.token.role == 'admin')
        );
    }

    // Collection: rules
    match /rules/{ruleId} {
        allow read: if isHospiceStaff();
        allow write: if isAdmin();
    }

    // Collection: preAdmissionVisits
    match /preAdmissionVisits/{visitId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: hospiceWorkflowStatus
    match /hospiceWorkflowStatus/{statusId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: eligibilityVerifications
    match /eligibilityVerifications/{verificationId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: preAdmissionAssessments
    match /preAdmissionAssessments/{assessmentId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: consentDocumentations
    match /consentDocumentations/{documentationId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: admissionSchedulings
    match /admissionSchedulings/{schedulingId} {
        allow read: if isAuthenticated() && (isHospiceStaff() || isAdmin());
        allow write: if isAuthenticated() && (isHospiceStaff() || isAdmin());
    }

    // Collection: facilityGroups
    match /facilityGroups/{groupId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
    }

    // Collection: bills
    match /bills/{billId} {
        allow read: if isAuthenticated() && (
          isAdmin() ||
          (isFacilityAdmin() && 
           resource.data.facilityId in get(/databases/$(database)/documents/user_facilities/$(request.auth.uid)).data.facilities)
        );
        allow create, update, delete: if isAuthenticated() && (
          isAdmin() ||
          (isFacilityAdmin() && 
           request.resource.data.facilityId in get(/databases/$(database)/documents/user_facilities/$(request.auth.uid)).data.facilities)
        );
    }

    // Collection: defaultpermissions
    match /defaultpermissions/{roleId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // Collection: facilities
    match /facilities/{facilityId} {
        allow read: if isAuthenticated();
        allow create: if isAdmin();
        allow delete: if isAdmin();
        allow update: if 
          isAuthenticated() && (
            isAdmin() ||
            (isFacilityAdmin() && 
             isFacilityAdminFor(facilityId) &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['branding']))
          );
    }

    // Collection: user_facilities
    match /user_facilities/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (
          isAdmin() || 
          (isFacilityAdmin() && (
            // For documents with facilities array
            (request.resource.data.facilities != null && 
              request.resource.data.facilities.hasOnly(
                get(/databases/$(database)/documents/user_facilities/$(request.auth.uid)).data.facilities
              )
            ) ||
            // For documents with facilityId field
            (request.resource.data.facilityId != null && 
              request.resource.data.facilityId in 
              get(/databases/$(database)/documents/user_facilities/$(request.auth.uid)).data.facilities
            )
          ))
        );
    }

    // Collection: rolepermissions
    match /rolepermissions/{roleId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // Collection: patients
    match /patients/{patientId} {
        function isEmailUnique(email) {
          return !exists(/databases/$(database)/documents/patients/$(email));
        }
      
        allow read: if isAuthenticated();
        allow create: if isAdmin() || isFacilityAdmin() && 
          (request.resource.data.email == null || isEmailUnique(request.resource.data.email));
        allow update: if 
          isAuthenticated() && (
            (isAdmin() || isFacilityAdmin()) && 
            (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email']) || 
            isEmailUnique(request.resource.data.email))
            ||
            // Allow document updates for authorized roles
            (canManageDocuments() && 
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['documents', 'updatedAt', 'updatedBy']))
          );
          
        // Subcollection: hospice_visits
        match /hospice_visits/{visitId} {
            allow read: if request.auth != null && (
              // Allow access with token claims
              (request.auth.token.hospiceAccess == true || request.auth.token.admin == true) ||
              // Fallback to user document data if token claims aren't available
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
            );
            allow write: if request.auth != null && (
              // Allow access with token claims
              request.auth.token.hospiceAccess == true ||
              // Fallback to user document data if token claims aren't available
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true
            );
        }
    }

    // Collection: visits
    match /visits/{visitId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin() || isFacilityAdmin();
    }

    // Collection: appointments
    match /appointments/{appointmentId} {
        allow read: if isPatientWithPortalAccess() && 
          resource.data.patientId == request.auth.uid;
    }

    // Collection: prescriptions
    match /prescriptions/{prescriptionId} {
        allow read: if isAuthenticated() && (
          isAdmin() || (isFacilityAdmin() &&
          resource.data.facilityId != null &&
          hasUserFacilityAccess(resource.data.facilityId))
        );
        allow write: if isAuthenticated() && (
          isAdmin() || (isFacilityAdmin() &&
          resource.data.facilityId != null &&
          hasUserFacilityAccess(resource.data.facilityId))
        );
    }

    // Collection: messageThreads
    match /messageThreads/{threadId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in resource.data.participants ||
          isHealthcareStaff()
        );
        
        allow create: if isAuthenticated() && 
          isHealthcareStaff() &&
          request.resource.data.keys().hasAll(['subject', 'participants', 'createdAt', 'createdBy']);
        
        allow update: if isAuthenticated() && 
          isHealthcareStaff();
    }

    // Collection: messages
    match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(resource.data.threadId)).data.participants ||
          isHealthcareStaff()
        );
        
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(request.resource.data.threadId)).data.participants &&
          request.resource.data.keys().hasAll(['threadId', 'content', 'sentAt', 'sentBy']);
    }

    // Collection: billing_codes
    match /billing_codes/{codeId} {
        allow read: if isAuthenticated() && (
          isAdmin() ||
          isFacilityAdmin() ||
          isDoctor() ||
          isNurse()
        );
        allow write: if isAuthenticated() && isAdmin();
    }

    // Collection: AlertsNotifications
    match /AlertsNotifications/{notificationId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin()
        );
        
        allow create: if isAuthenticated() && (
          isAdmin() ||
          request.auth.uid == request.resource.data.userId
        );
        
        allow update: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin()
        );
        
        allow delete: if isAuthenticated() && (
          request.auth.uid == resource.data.userId ||
          isAdmin()
        );
    }

    // Collection: audit
    match /audit/{logId} {
        allow read: if isAuthenticated() && isAdmin();
        allow write: if isAuthenticated() && isAdmin();
    }

    // Collection: features
    match /features/{featureId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isAdmin();
    }

    // Collection: inventory_items
    match /inventory_items/{itemId} {
        allow read: if isAuthenticated() && !isPatientWithPortalAccess();
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection: inventory_batches
    match /inventory_batches/{batchId} {
        allow read: if isAuthenticated() && !isPatientWithPortalAccess();
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection: inventory_transactions
    match /inventory_transactions/{transactionId} {
        allow read: if isAuthenticated() && !isPatientWithPortalAccess();
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection: inventory_suppliers
    match /inventory_suppliers/{supplierId} {
        allow read: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection: inventory_purchase_orders
    match /inventory_purchase_orders/{orderId} {
        allow read: if isAuthenticated() && !isPatientWithPortalAccess();
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection: inventory_locations
    match /inventory_locations/{locationId} {
        allow read: if isAuthenticated() && !isPatientWithPortalAccess();
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection: inventory_counters
    match /inventory_counters/{counterId} {
        allow read: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
        allow write: if isAuthenticated() && (isAdmin() || isFacilityAdmin());
    }

    // Collection Group Query Permissions
    // These are required for querying across collections with the same name

    // Collection group query: hospice_visits
    match /{path=**}/hospice_visits/{visitId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true
        );
    }

    // Collection group query: hospice_symptom_logs
    match /{path=**}/hospice_symptom_logs/{logId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true
        );
    }

    // Collection group query: hospice_service_visits
    match /{path=**}/hospice_service_visits/{visitId} {
        allow read: if request.auth != null && (
          request.auth.token.hospiceAccess == true || 
          request.auth.token.admin == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
        allow write: if request.auth != null && (
          request.auth.token.hospiceAccess == true ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.hospiceAccess == true
        );
    }
  }
}