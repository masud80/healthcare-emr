rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.admin == true || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFacilityAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'facility_admin';
    }

    function isDoctor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }

    function isNurse() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'nurse';
    }

    function canManageDocuments() {
      return isAdmin() || isFacilityAdmin() || isDoctor() || isNurse();
    }

    function hasUserFacilityAccess(facilityId) {
      return exists(/databases/$(database)/documents/facilityUsers/$(request.auth.uid)) &&
        facilityId in get(/databases/$(database)/documents/facilityUsers/$(request.auth.uid)).data.facilities;
    }

    // Function to check if the user is a patient with portal access
    function isPatientWithPortalAccess() {
      return exists(/databases/$(database)/documents/patients/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/patients/$(request.auth.uid)).data.isPatientPortalEnabled == true;
    }

    // Facilities collection
    match /facilities/{facilityId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow delete: if isAdmin();
      allow update: if 
        isAuthenticated() && (
          isAdmin() ||
          (isFacilityAdmin() && 
           isFacilityAdminFor(facilityId) &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['branding']))
        );
    }

    // User Facilities collection
    match /user_facilities/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection - needed for role checks
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin()
      );
    }

    // Patients collection
    match /patients/{patientId} {
      function isEmailUnique(email) {
        let existingPatients = getAfter(/databases/$(database)/documents/patients)
          .where('email', '==', email).limit(1);
        return existingPatients.size() == 0 || 
          (existingPatients.size() == 1 && existingPatients[0].id == patientId);
      }

      allow read: if isAuthenticated();
      allow create: if isAdmin() || isFacilityAdmin() && 
        (request.resource.data.email == null || isEmailUnique(request.resource.data.email));
      allow update: if 
        isAuthenticated() && (
          (isAdmin() || isFacilityAdmin()) && 
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email']) || 
          isEmailUnique(request.resource.data.email))
          ||
          // Allow document updates for authorized roles
          (canManageDocuments() && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['documents', 'updatedAt', 'updatedBy']))
        );
    }

    // Patient data access
    match /patients/{patientId} {
      allow read: if request.auth.uid == patientId && isPatientWithPortalAccess();
    }

    // Visits collection
    match /visits/{visitId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isFacilityAdmin();
    }

    // Other collections that patients should access
    match /appointments/{appointmentId} {
      allow read: if isPatientWithPortalAccess() && 
        resource.data.patientId == request.auth.uid;
    }

    match /visits/{visitId} {
      allow read: if isPatientWithPortalAccess() && 
        resource.data.patientId == request.auth.uid;
    }

    // Prescriptions collection
    match /prescriptions/{prescriptionId} {
      allow read: if isAuthenticated() && (
        isAdmin() || (isFacilityAdmin() &&
        resource.data.facilityId != null &&
        hasUserFacilityAccess(resource.data.facilityId))
      );
      allow write: if isAuthenticated() && (
        isAdmin() || (isFacilityAdmin() &&
        resource.data.facilityId != null &&
        hasUserFacilityAccess(resource.data.facilityId))
      );
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isFacilityAdmin() ||
        request.auth.uid == resource.data.doctorId ||
        request.auth.uid == resource.data.patientId ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'nurse' &&
         hasUserFacilityAccess(resource.data.facilityId))
      );
      
      allow write: if isAuthenticated() && (
        isAdmin() ||
        isFacilityAdmin() ||
        request.auth.uid == resource.data.doctorId
      );
    }

    match /messageThreads/{threadId} {
      function isHealthcareStaff() {
        return request.auth.token.role in ['doctor', 'nurse', 'admin'];
      }

      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        isHealthcareStaff()
      );
      
      allow create: if isAuthenticated() && 
        isHealthcareStaff() &&
        request.resource.data.keys().hasAll(['subject', 'participants', 'createdAt', 'createdBy', 'lastMessageAt']);
      
      allow update: if isAuthenticated() && 
        isHealthcareStaff() &&
        request.auth.uid in resource.data.participants;
    }

    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(resource.data.threadId)).data.participants ||
        isHealthcareStaff()
      );
      
      allow create: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/messageThreads/$(request.resource.data.threadId)).data.participants &&
        request.resource.data.keys().hasAll(['threadId', 'content', 'sentAt', 'sentBy']);
      
      allow update: if false; // Messages cannot be edited
      allow delete: if false; // Messages cannot be deleted
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
