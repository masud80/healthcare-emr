rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return request.auth.token.admin == true || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isFacilityAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'facility_admin';
    }

    function isUserConnectedToFacility(facilityId) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return facilityId in userData.facilityIds;
    }

    function isFacilityAdminOf(facilityId) {
      let facilityData = get(/databases/$(database)/documents/facilities/$(facilityId)).data;
      return request.auth.uid in facilityData.adminIds;
    }

    // Facilities collection rules
    match /facilities/{facilityId} {
      // Read rules
      allow read: if request.auth != null && (
        isAdmin() || 
        isFacilityAdmin() || 
        isUserConnectedToFacility(facilityId)
      );

      // Create rules
      allow create: if request.auth != null && (
        isAdmin() || 
        (isFacilityAdmin() && request.resource.data.adminIds.hasAll([request.auth.uid]))
      );

      // Update rules
      allow update: if request.auth != null && (
        isAdmin() || 
        (isFacilityAdmin() && isFacilityAdminOf(facilityId))
      ) && (
        // Ensure adminIds field can't be modified by facility admins
        !isFacilityAdmin() || 
        (request.resource.data.adminIds == resource.data.adminIds)
      );

      // Delete rules - We'll use deactivation instead of deletion
      allow delete: if false;
    }

    // Default rule for other collections
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
