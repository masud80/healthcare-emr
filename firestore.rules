rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.admin == true ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
    }

    function isFacilityAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'facility_admin';
    }

    function hasUserFacilityAccess(facilityId) {
      let docId = request.auth.uid + '_' + facilityId;
      return exists(/databases/$(database)/documents/user_facilities/$(docId));
    }

    // Bills collection
    match /bills/{billId} {
      allow read: if isAuthenticated() && (
        isAdmin() || (isFacilityAdmin() &&
        resource.data.facilityId != null &&
        hasUserFacilityAccess(resource.data.facilityId))
      );
      allow write: if isAuthenticated() && (
        isAdmin() || (isFacilityAdmin() &&
        resource.data.facilityId != null &&
        hasUserFacilityAccess(resource.data.facilityId))
      );
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || // Allow users to read their own profile
        isAdmin()                     // Admins can read any profile
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == userId && // Allow users to update their own profile
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) || // Prevent users from changing their role
        isAdmin()                     // Admins can update any profile
      );
      // Keep existing write rule for admin-only creation
      allow create, delete: if isAdmin();
    }

    // User Facilities collection
    match /user_facilities/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Facilities collection
    match /facilities/{facilityId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Patients collection
    match /patients/{patientId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isFacilityAdmin();
      allow update: if request.auth != null 
        && request.auth.token.role in ['admin', 'doctor']
        && (!request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['isPatientPortalEnabled']) 
            || request.auth.token.role == 'admin');
    }

    // Visits collection
    match /visits/{visitId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() || isFacilityAdmin();
    }

    // Prescriptions collection
    match /prescriptions/{prescriptionId} {
      allow read: if isAuthenticated() && (
        isAdmin() || (isFacilityAdmin() &&
        resource.data.facilityId != null &&
        hasUserFacilityAccess(resource.data.facilityId))
      );
      allow write: if isAuthenticated() && (
        isAdmin() || (isFacilityAdmin() &&
        resource.data.facilityId != null &&
        hasUserFacilityAccess(resource.data.facilityId))
      );
    }

    // Appointments collection
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.uid == resource.data.doctorId) ||
        (request.auth.uid == resource.data.patientId) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'nurse' &&
         resource.data.facilityId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.facilityId)
      );
      allow create: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.uid == request.resource.data.doctorId) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'nurse' &&
         request.resource.data.facilityId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.facilityId)
      );
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.uid == resource.data.doctorId && request.auth.uid == request.resource.data.doctorId) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'nurse' &&
         resource.data.facilityId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.facilityId &&
         request.resource.data.facilityId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.facilityId)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.uid == resource.data.doctorId) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'nurse' &&
         resource.data.facilityId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.facilityId)
      );
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
